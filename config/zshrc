################################################################################
### ZSH configuration
################################################################################
export ZSH=/home/$USER/.oh-my-zsh
ZSH_THEME="jlrickert"
ENABLE_CORRECTION="false"
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable
# marking untracked files under VCS as dirty. This makes
# repository status check for large repositories much, much
# faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

HIST_STAMPS="yyyy-mm-dd"
plugins=(
    autopep8
    cabal
    common-aliases
    django
    docker
    encode64
    fasd
    gem
    git
    jsontools
    lein
    pep8
    pip
    pyenv
    pylint
    python
    rails
    rake
    rbenv
    ruby
    rust
    systemd
    vagrant
    vi-mode
    zsh-syntax-highlighting
)

source $ZSH/oh-my-zsh.sh

################################################################################
### User configuration
################################################################################
# Environmental variables
export BROWSER=firefox
export DEFAULT_USER=`whoami`
export DOTFILES=`dirname $(dirname "$(readlink -f "${(%):-%x}")")`
export GOPATH=$HOME/code/gocode
export ANDROID_HOME=/opt/android-sdk
export PYENV_ROOT=$HOME/.pyenv
export CARGO_HOME=$HOME/.cargo
export RUST_SRC_PATH=~/.multirust/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src
export LANG=en_US.UTF-8
export BROWSER=firefox
export EDITOR=vim
export VISUAL=vim
export PAGER=less
export RUBYLIB=$HOME/.local/lib/ruby
export PYTHONPATH=$HOME/.local/lib/python
export PERL5LIB="/home/raviko/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"
export PERL_LOCAL_LIB_ROOT="/home/raviko/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"
export PERL_MB_OPT="--install_base \"/home/raviko/perl5\""
export PERL_MM_OPT="INSTALL_BASE=/home/raviko/perl5"

# Compilation flags
export ARCHFLAGS="-arch x86_64"

# Set the default Less options.
# Mouse-wheel scrolling has been disabled by -X (disable screen clearing).
# Remove -X and -F (exit if the content fits on one screen) to enable it.
export LESS='-F -g -i -M -R -S -w -X -z-4'

### Make sure a tmp dir exists
if [[ ! -d "$TMPDIR" ]]; then
    export TMPDIR="/tmp/$USER"
    mkdir -p -m 700 "$TMPDIR"
fi

TMPPREFIX="${TMPDIR%/}/zsh"

########################################
### Paths
########################################
# Ensure path arrays do not contain duplicates.
typeset -gU cdpath fpath mailpath path

path=(
    $HOME/perl5/bin
    $path[@]
    $HOME/.local/bin
    $PYENV_ROOT/bin
    $HOME/.cargo/bin
    $GOPATH/bin
)

# Set the list were completions are stored
fpath=(
    $fpath[@]
    $HOME/.local/share/completions
)

# Set the the list of directories that cd searches.
cdpath=(
    $cdpath
)
################################################################################
### Custom Keymaps
################################################################################
bindkey '^[n' down-history
bindkey '^[p' up-history
bindkey '^[r' history-incremental-search-backward
bindkey -M vicmd "w" vi-backward-word
bindkey -M vicmd "e" vi-forward-word-end
bindkey -M vicmd '^[n' down-history
bindkey -M vicmd '^[p' up-history
bindkey -M vicmd 'k' up-line
bindkey -M vicmd 'j' down-line
export KEYTIMEOUT=1


################################################################################
### Custom Functions
################################################################################

###
# Util
###

function eecho {
    echo $@ 1>&2
}

###
# Arch Linux
###
paclist() {
  # Source: https://bbs.archlinux.org/viewtopic.php?id=93683
  LC_ALL=C pacman -Qei $(pacman -Qu | cut -d " " -f 1) | \
    awk 'BEGIN {FS=":"} /^Name/{printf("\033[1;36m%s\033[1;37m", $2)} /^Description/{print $2}'
}

pacdisowned() {
  emulate -L zsh

  tmp=${TMPDIR-/tmp}/pacman-disowned-$UID-$$
  db=$tmp/db
  fs=$tmp/fs

  mkdir "$tmp"
  trap  'rm -rf "$tmp"' EXIT

  pacman -Qlq | sort -u > "$db"

  find /bin /etc /lib /sbin /usr ! -name lost+found \
    \( -type d -printf '%p/\n' -o -print \) | sort > "$fs"

  comm -23 "$fs" "$db"
}

pacmanallkeys() {
  emulate -L zsh
  curl -s https://www.archlinux.org/people/{developers,trustedusers}/ | \
    awk -F\" '(/pgp.mit.edu/) { sub(/.*search=0x/,""); print $1}' | \
    xargs sudo pacman-key --recv-keys
}

pacmansignkeys() {
  emulate -L zsh
  for key in $*; do
    sudo pacman-key --recv-keys $key
    sudo pacman-key --lsign-key $key
    printf 'trust\n3\n' | sudo gpg --homedir /etc/pacman.d/gnupg \
      --no-permission-warning --command-fd 0 --edit-key $key
  done
}

###
# clipboard
###

# stolen from http://madebynathan.com/2011/10/04/a-nicer-way-to-use-xclip/
cb() {
    local _scs_col='\e[0;32m'
    local _wrn_col='\e[1;31m'
    local _trn_col='\e[0;33m'

    # Check that xclip is installed.
    if ! type xclip > /dev/null 2>&1;
    then
        echo -e "$_wrn_col""You must have the 'xclip' program installed.\e[0m"
        # Check user is not root (root doesn't have access to user xorg server)
    elif [[ "$USER" == "root" ]]; then
        echo -e "$_wrn_col""Must be regular user (not root) to copy a file to the clipboard.\e[0m"
    else
        # If no tty, data should be available on stdin
        if ! [[ "$( tty )" == /dev/* ]];
        then
            input="$(< /dev/stdin)"
            # Else, fetch input from params
        else
            input="$*"
        fi

        # If no input, print usage message.
        if [ -z "$input" ];
        then
            echo "Copies a string to the clipboard."
            echo "Usage: cb <string>"
            echo "       echo <string> | cb"
        else
            # Copy input to clipboard
            echo -n "$input" | xclip -selection c
            # Truncate text for status
            if [ ${#input} -gt 80 ];
            then
                # echo -n "$input"
                input="$(echo "[master]" | cut -c1-80)$_trn_col...\e[0m";
            fi
            # Print status.
            echo -e "$_scs_col""Copied to clipboard:\e[0m $input"
        fi
    fi
}

function cbf() { cat "$1" | cb; }

## Haskell
function cabal_sandbox_info() {
    cabal_files=(*.cabal(N))
    if [ $#cabal_files -gt 0 ]; then
        if [ -f cabal.sandbox.config ]; then
            echo "%{$fg[green]%}sandboxed%{$reset_color%}"
        else
            echo "%{$fg[red]%}not sandboxed%{$reset_color%}"
        fi
    fi
}

###
# browser
###

function firefox_open {
    if [ $# = 0 ]; then
        eecho "usage: ff <file>" 1>&2
        return 1
    fi
    if [ "${1%/*}" = "$1" ]; then
        firefox -new-tab "file://$(pwd)/$1"
    else
        "cd" "${1%/*}"
        local dir="$(pwd)"
        "cd" - >/dev/null
        firefox -new-tab "file://$dir/${1##*/}"
    fi
    return 0
}

########################################
### Aliass
########################################
alias py='python'
alias py2='python2'
alias rb='ruby'
alias wopen='firefox_open'
alias emacs='emacs_wrapper'

#
# Pacman Aliases
#
alias pac='pacman --color auto'
alias paci='sudo pacman --color auto --sync'
alias pacI='sudo pacman --color auto --upgrades'
alias pacu='sudo pacman --color auto --sync --refresh && sudo abs'
alias pacU='sudo pacman --color auto --sync --refresh --sysupgrade'
alias pacx='sudo pacman --color auto --remove'
alias pacX='sudo pacman --color auto --remove --nosave --recursive'
alias pacs='pacman --color auto --sync --search'
alias pacq='pacman --color auto --query --info'
alias pacQ='pacman --color auto --query --search'
alias paclsorphans='sudo pacman --color auto  -Qdt'
alias pacxmorphans='sudo pacman --color auto  -Rs $(pacman -Qtdq)'

#
# Yaourt Aliases
#
alias yac='yaourt --color auto '
alias yaci='yaourt --sync'
alias yacI='yaourt --upgrades'
alias yacu='yaourt --sync --refresh && sudo abs'
alias yacU='yaourt --sync --refresh --sysupgrade --aur'
alias yacx='yaourt --remove'
alias yacX='yaourt --remove --nosave --recursive'
alias yacs='yaourt --sync --search'
alias yacq='yaourt --query --info'
alias yacQ='yaourt --query --search'
alias yaclsorphans='sudo yaourt -Qdt'
alias yacxmorphans='sudo yaourt -Rs $(pacman -Qtdq)'

#
# networking
#
alias ports='netstat -tulanp'

alias ipt='sudo /sbin/iptables'
alias iptlist='sudo /sbin/iptables -L -n -v --line-numbers'
alias iptlistin='sudo /sbin/iptables -L INPUT -n -v --line-numbers'
alias iptlistout='sudo /sbin/iptables -L OUTPUT -n -v --line-numbers'
alias iptlistfw='sudo /sbin/iptables -L FORWARD -n -v --line-numbers'
alias firewall=iptlist

#
# miscellaneous
#
alias screenshot='maim ~/Media/Screenshots/$(date +"%F-%T").png'
alias snapterm='maim -i $(xdotool getactivewindow) ~/Media/Screenshots/$(date +"%F-%T").png'
alias df="df -h"

alias meminfo='free -m -l -t -h'

#
# get top process eating memory
#
alias psmem='ps auxf | sort -nr -k 4'
alias psmem10='ps auxf | sort -nr -k 4 | head -10'

# get GPU ram on desktop / laptop##
alias gpumeminfo='grep -i --color memory /var/log/Xorg.0.log'

# Grabs the disk usage in the current directory
alias usage='du -ch | grep total'

# Gets the total disk usage on your machine
alias totalusage='df -hl --total | grep total'

# Shows the individual partition usages without the temporary memory values
alias partusage='df -hlT --exclude-type=tmpfs --exclude-type=devtmpfs'

# Gives you what is using the most space. Both directories and files. Varies on
# current directory
alias most='du -hsx * | sort -rh | head -10'

alias ctime="date '+%Y-%m-%d %H:%M:%S'"
alias cdate="date '+%Y-%m-%d'"
