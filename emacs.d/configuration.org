#+TITLE: Emacs Configuration

* Setup Initialization
** Load Paths
Load all the paths to find custom elisp and resources

*lisp* folder is for third party code

*lang* is for my custom programming modes

*resources* has other files that are used

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
(add-to-list 'load-path (expand-file-name "lang" user-emacs-directory))
(add-to-list 'load-path (expand-file-name "resources" user-emacs-directory))
#+END_SRC
** GC Tweaks
Disable the garbage compile for faster startup

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold most-positive-fixnum)

(add-hook
 'after-init-hook
 (lambda ()
   (message "Restoring gc-cons to default value")
   (setq gc-cons-threshold (* 1024 1024))))
#+END_SRC
** Print initialize time
#+BEGIN_SRC emacs-lisp
(add-hook
 'after-init-hook
 (lambda ()
   (message (format "init completed in %s" (emacs-init-time)))))
#+END_SRC
* Set personal information
Basic information about me

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Jared L. Rickert"
      user-mail-address "jaredrickert52@gmail.com"
      calendar-latitude 45.6
      calendar-longitude 94.1
      calendar-location-name "St Cloud, MN")
#+END_SRC
* Package management
Starts up the emacs package manager and loads helper functions for
managing packages

#+BEGIN_SRC emacs-lisp
(message "Setting up package management")

(require 'package)

(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("elpy" . "https://jorgenschaefer.github.io/packages/"))

;;; Pin some packages to specific repositories.
(setq package-pinned-packages '((gtags . "marmalade")
                                (php-extras . "marmalade")))

(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
(package-install 'use-package))
(eval-when-compile (require 'use-package))

(setq use-package-always-ensure t)

;; usefull pacages
(use-package cl)
#+END_SRC
* Helper Functions
#+BEGIN_SRC emacs-lisp
(if (fboundp 'with-eval-after-load)
    (defalias 'after-load 'with-eval-after-load)
  (defmacro after-load (feature &rest body)
    "After FEATURE is loaded, evaluate BODY."
    (declare (indent defun))
    `(eval-after-load ,feature
'(progn ,@body))))
#+END_SRC
* =evil-mode=

Use =evil=.

#+BEGIN_SRC emacs-lisp
(message "Loading evil-mode")
(use-package evil
  :config
  (evil-mode 1))
(use-package evil-indent-textobject :after evil)
(use-package evil-leader
  :after evil
  :config
  (evil-leader/set-leader "SPC")
  (global-evil-leader-mode))
(use-package evil-matchit
  :after evil
  :config
  (global-evil-matchit-mode 1))
(use-package evil-nerd-commenter
  :after (evil evil-leader)
  :commands evilnc-comment-or-uncomment-lines
  :config
  (evil-leader/set-key "/" 'evilnc-comment-or-uncomment-lines)
  )
(use-package evil-surround
  :after evil
  :config
  (global-evil-surround-mode))

#+END_SRC
* i3 Integration

This makes it nicer to use with i3

#+BEGIN_SRC emacs-lisp
(message "Loading i3 Integration")
(require 'i3)
(require 'i3-integration)
(i3-one-window-per-frame-mode-on)
#+END_SRC
* General Preferences
#+BEGIN_SRC emacs-lisp
(message "Loading General Preferences")
#+END_SRC
** General
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p) ;; 'y' or 'n' is good enough

(setq-default ring-bell-function 'ignore)

;; Move files to trash when deleting
(setq delete-by-moving-to-trash t)
(setq x-select-enable-clipboard t)

;; Auto refresh buffers
(global-auto-revert-mode 1)

;; Also auto refresh dired, but be quiet about it
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)

;; Show active region
(transient-mark-mode 1)
(make-variable-buffer-local 'transient-mark-mode)
(put 'transient-mark-mode 'permanent-local t)
(setq-default transient-mark-mode t)

;; 80 charactor lines
(setq fill-column 80)
(set-default 'fill-column 80)

#+END_SRC
** Performance
#+BEGIN_SRC emacs-lisp
(defun jlr/minibuffer-setup-hook ()
  (setq gc-cons-threshold most-positive-fixnum))

(defun jlr/minibuffer-exit-hook ()
  (setq gc-cons-threshold 800000))

(add-hook 'minibuffer-setup-hook #'jlr/minibuffer-setup-hook)
(add-hook 'minibuffer-exit-hook #'jlr/minibuffer-exit-hook)

;; Run at full power please
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
#+END_SRC
** UTF8
#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8) ;; pretty
(set-terminal-coding-system 'utf-8) ;; pretty
(set-keyboard-coding-system 'utf-8) ;; pretty
(set-selection-coding-system 'utf-8) ;; please
(prefer-coding-system 'utf-8) ;; with sugar on top
(set-language-environment "UTF-8")
#+END_SRC
** Editor
#+BEGIN_SRC emacs-lisp
(message "Loading default editor settings")
(global-linum-mode)
(use-package nlinum :config (global-nlinum-mode))
(show-paren-mode 1)
(setq-default truncate-lines t) ;; disables line wrapping
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
** Programming
#+BEGIN_SRC emacs-lisp
(message "Loading prog mode defaults")

;; Never insert tabs
(set-default 'indent-tabs-mode nil)

;; Show me empty lines after buffer end
(set-default 'indicate-empty-lines t)

;; Keep cursor away from edges when scrolling up/down
(use-package smooth-scrolling)

;; Allow recursive minibuffers
(setq enable-recursive-minibuffers t)
#+END_SRC
** Backup
#+BEGIN_SRC emacs-lisp
(defvar backup-dir "~/.emacs.d/backups/")
(setq backup-directory-alist
        `(("." . ,(expand-file-name
                   (concat user-emacs-directory "backups"))))
      backup-by-copying t
      delete-old-versions t
      make-backup-files t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)

;; Write backup files to own directory

;; Make backups of files, even when they're in version control
(setq vc-make-backup-files t)


;; autsave no longer puts it in my working directory
(setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
#+END_SRC
** Autocomplete
#+BEGIN_SRC emacs-lisp
(use-package company
  :diminish "CMP"
  :config
  (global-company-mode)
  (setq-default
   company-backends '((company-capf company-dabbrev-code) company-dabbrev))

  (setq company-idle-delay 0.2)
  (setq completion-cycling 5)
  (setq company-selection-wrap-around t)
  (setq company-tooltip-align-annotations t)

  (define-key evil-insert-state-map (kbd "M-n") 'company-complete-common)
  (define-key company-active-map (kbd "M-n") 'company-select-next)
  (define-key company-active-map (kbd "M-p") 'company-select-previous)
  )

(use-package company-quickhelp
  :after company
  :config
  (company-quickhelp-mode t))

#+END_SRC
** Syntax Checking
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :diminish " â“¢"
  :config
  (add-hook 'after-init-hook 'global-flycheck-mode)
  (add-to-list 'evil-emacs-state-modes 'flycheck-error-list-mode)
  ;; Override default flycheck triggers
  (setq flycheck-emacs-lisp-load-path 'inherit
        flycheck-check-syntax-automatically '(save idle-change mode-enabled)
        flycheck-idle-change-delay 0.8)

  (add-hook 'flycheck-mode-hook
            (lambda ()
              (after-load 'evil-leader
                (evil-leader/set-key
                  (kbd "el") 'flycheck-list-errors
                  (kbd "en") 'flycheck-next-error
                  (kbd "ep") 'flycheck-previous-error))))

  ;; temporary solution for not being able to ergonomically close
  ;; flycheck error messages if it opens in another buffer instead of
  ;; the minibuffer
  (setq max-mini-window-height 0.5)

  (setq flycheck-display-errors-function #'flycheck-display-error-messages-unless-error-list)

  (when (fboundp 'define-fringe-bitmap)
    (define-fringe-bitmap 'my-flycheck-fringe-indicator
      (vector #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00011100
              #b00111110
              #b00111110
              #b00111110
              #b00011100
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000)))

  (flycheck-define-error-level 'error
    :overlay-category 'flycheck-error-overlay
    :fringe-bitmap 'my-flycheck-fringe-indicator
    :fringe-face 'flycheck-fringe-error)

  (flycheck-define-error-level 'warning
    :overlay-category 'flycheck-warning-overlay
    :fringe-bitmap 'my-flycheck-fringe-indicator
    :fringe-face 'flycheck-fringe-warning)

  (flycheck-define-error-level 'info
    :overlay-category 'flycheck-info-overlay
    :fringe-bitmap 'my-flycheck-fringe-indicator
    :fringe-face 'flycheck-fringe-info))
#+END_SRC
** Projects
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :config
  (projectile-global-mode)
  ;(setq projectile-enable-caching t)
  (setq projectile-indexing-method 'alien
        projectile-enable-caching t
        projectile-cache-file (expand-file-name ".projectile" user-emacs-directory)
        projectile-known-projects-file (expand-file-name ".projectile-bookmarks" user-emacs-directory)
        projectile-recentf-files (expand-file-name ".recentf" user-emacs-directory)
        projectile-completion-system 'ido
        projectile-switch-project-action 'projectile-dired
        projectile-globally-ignored-directories '(".metadata"
                                                  ".cabal-sandbox"
                                                  ".stversions"
                                                  ".stfolder"
                                                  ".stignore"
                                                  "dist"
                                                  "elpa"
                                                  "snippets"
                                                  "node_modules"
                                                  "build"
                                                  "target"
                                                  "out"
                                                  "cache"
                                                  ".cache"
                                                  ".git"
                                                  ".hg"
                                                  ".bzr"
                                                  ".svn"
                                                  "venv")))
#+END_SRC
** Minibuffers
*** =ido=
#+BEGIN_SRC emacs-lisp
(use-package ido
  :ensure t
  :after smex
  :config
  (require 'uniquify)
  (use-package ido-ubiquitous :ensure t)
  (use-package flx-ido :ensure t :config)
  (use-package ido-vertical-mode :ensure t)

  (ido-mode 1)
  (ido-everywhere 1)
  (flx-ido-mode 1)
  (ido-ubiquitous-mode 1)
  (ido-vertical-mode 1)
  (setq ido-enable-prefix nil
        ido-use-virtual-buffers t
        ido-enable-flex-matching t
        ido-create-new-buffer 'always
        ido-show-dot-for-dired t
        ido-confirm-unique-completion nil
        ido-enable-last-directory-history nil
        ido-use-filename-at-point nil
        ido-save-directory (expand-file-name ".ido.last" user-emacs-directory)
        ido-auto-merge-work-directories-length 0)

  (setq uniquify-buffer-name-style 'reverse)
  (setq uniquify-separator " â€¢ ")
  (setq uniquify-after-kill-buffer-p t)
  (setq uniquify-ignore-buffers-re "^\\*")

  (setq ido-use-faces t)
  (set-face-attribute 'ido-vertical-first-match-face nil
                      :background "#e5b7c0")
  (set-face-attribute 'ido-vertical-only-match-face nil
                      :background "#e52b50"
                      :foreground "white")
  (set-face-attribute 'ido-vertical-match-face nil
                      :foreground "#b00000")
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)

  (add-hook 'ido-setup-hook
            (lambda ()
              (define-key ido-file-dir-completion-map "~" 'ido-jump-to-home)
              (define-key ido-file-dir-completion-map (kbd "RET") 'exit-minibuffer)
              (define-key ido-file-dir-completion-map [tab] 'ido-complete)
              (define-key ido-file-dir-completion-map (kbd "M-Y") 'ido-select-text)
              (define-key ido-file-dir-completion-map (kbd "M-n") 'ido-next-match)
              (define-key ido-file-dir-completion-map (kbd "M-p") 'ido-prev-match)
              (define-key ido-file-dir-completion-map (kbd "M-y") 'ido-select-text)

              (define-key ido-common-completion-map (kbd "RET") 'exit-minibuffer)
              (define-key ido-common-completion-map (kbd "TAB") 'ido-complete)
              (define-key ido-common-completion-map (kbd "M-n") 'ido-next-match)
              (define-key ido-common-completion-map (kbd "M-p") 'ido-prev-match)
              (define-key ido-common-completion-map (kbd "M-y") 'ido-select-text)))


  (defadvice smex (around space-inserts-hyphen activate compile)
             (let ((ido-cannot-complete-command
                     `(lambda()
                        (interactive)
                        (if (string= " " (this-command-keys))
                          (insert ?-)
                          (funcall ,ido-cannot-complete-command)))))
               ad-do-it))
)
#+END_SRC
*** =smex=
#+BEGIN_SRC emacs-lisp
(use-package smex
  :ensure t
  :config
  (defun smex-update-after-load (unused)
    (when (boundp 'smex-cache)
      (smex-update)))

  (setq smex-save-file (expand-file-name ".smex-items" user-emacs-directory))
  (smex-initialize)

(add-hook 'after-load-functions 'smex-update-after-load)

(global-set-key (kbd "M-x") 'smex))
#+END_SRC
** Smartparens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :ensure t
  :config
  (require 'smartparens-config))

(use-package evil-smartparens
  :ensure t
  :after (smartparends evil)
  :config
  (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode))
#+END_SRC
* UI Preferences
#+BEGIN_SRC emacs-lisp
(message "Loading UI Preferences")
#+END_SRC emacs-lisp
** UI General Settings
#+BEGIN_SRC emacs-lisp
;; Turn off mouse interface early in startup to avoid momentary display
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

;; No splash screen please ... jeez
(setq inhibit-startup-message t)
(show-paren-mode 1)
(setq-default scroll-preserve-screen-position 'always)
(setq-default hscroll-step 5)  ; make horrizontal scrolling less jumpy
(setq-default scroll-step 1)
(setq-default scroll-conservatively 10000)
;(setq-default left-fringe-width 0)
;(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
#+END_SRC
** Emacs title
#+BEGIN_SRC emacs-lisp
(defun update-emacs-title ()
  "Update the Emacs title based on the current buffer.
If the current buffer is associated with a filename, that filename will be
used to tile the window.  Otherwise, the window will be titled based upon the
name of the buffer."
  (if (buffer-file-name (current-buffer))
      (setq frame-title-format "Emacs - %f")
      (setq frame-title-format "Emacs - %b")))

(cl-dolist (hook '(buffer-list-update-hook
                   change-major-mode-hook
                   find-file-hook))
(add-hook hook 'update-emacs-title))
#+END_SRC
** Theme
Load solarized theme

#+BEGIN_SRC emacs-lisp
(message "Loading solarized-theme")
(use-package solarized-theme
  :ensure t
  :config
  (setq custom-safe-themes t)
  (load-theme 'solarized-dark))
#+END_SRC
** Fonts
#+BEGIN_SRC emacs-lisp
(message "Loading Fonts")

(set-face-attribute 'default nil
                    :family "Source Code Pro"
                    :height 80
                    :weight 'normal
                    :width 'normal)

(defun functional-prettification ()
  (setq
   prettify-symbols-alist
   (list '("function" . ?Æ’)
         '("func" . ?Æ’)
         '("fn" . ?Î»)
         '("lambda" . ?Î»)
         '("!=" . ?â‰ )
         '(">=" . ?â‰¥)
         '("<=" . ?â‰¤)
         '("&&" . ?âˆ§)
         '("||" . ?âˆ¨)
         '("PI" . ?Ï€)
         '("Math.PI" . ?Ï€)
         '("math.PI" . ?Ï€)
         ))
  (prettify-symbols-mode t)
)
#+END_SRC
** Mode line
#+BEGIN_SRC emacs-lisp
(message "Loading mode line settings")
(defface my-pl-segment1-active
  '((t (:foreground "#000000" :background "#E1B61A")))
  "Powerline first segment active face.")
(defface my-pl-segment1-inactive
  '((t (:foreground "#CEBFF3" :background "#3A2E58")))
  "Powerline first segment inactive face.")
(defface my-pl-segment2-active
  '((t (:foreground "#F5E39F" :background "#8A7119")))
  "Powerline second segment active face.")
(defface my-pl-segment2-inactive
  '((t (:foreground "#CEBFF3" :background "#3A2E58")))
  "Powerline second segment inactive face.")
(defface my-pl-segment3-active
  '((t (:foreground "#CEBFF3" :background "#3A2E58")))
  "Powerline third segment active face.")
(defface my-pl-segment3-inactive
  '((t (:foreground "#CEBFF3" :background "#3A2E58")))
  "Powerline third segment inactive face.")

(defun jlr/powerline-default-theme ()
  "Set up my custom Powerline with Evil indicators."
  (interactive)
  (setq-default mode-line-format
                '("%e"
                  (:eval
                   (let* ((active (powerline-selected-window-active))
                          (seg1 (if active 'my-pl-segment1-active 'my-pl-segment1-inactive))
                          (seg2 (if active 'my-pl-segment2-active 'my-pl-segment2-inactive))
                          (seg3 (if active 'my-pl-segment3-active 'my-pl-segment3-inactive))
                          (separator-left (intern (format "powerline-%s-%s"
                                                          (powerline-current-separator)
                                                          (car powerline-default-separator-dir))))
                          (separator-right (intern (format "powerline-%s-%s"
                                                           (powerline-current-separator)
                                                           (cdr powerline-default-separator-dir))))
                          (lhs (list (let ((evil-face (powerline-evil-face)))
                                       (if evil-mode
                                           (powerline-raw (powerline-evil-tag) evil-face)
                                         ))
                                     (if evil-mode
                                         (funcall separator-left (powerline-evil-face) seg1))
                                     (powerline-buffer-id seg1 'l)
                                     (powerline-raw "[%*]" seg1 'l)
                                     (when (and (boundp 'which-func-mode) which-func-mode)
                                       (powerline-raw which-func-format seg1 'l))
                                     (powerline-raw " " seg1)
                                     (funcall separator-left seg1 seg2)
                                     (when (boundp 'erc-modified-channels-object)
                                       (powerline-raw erc-modified-channels-object seg2 'l))
                                     (powerline-major-mode seg2 'l)
                                     (powerline-process seg2)
                                     (powerline-minor-modes seg2 'l)
                                     (powerline-narrow seg2 'l)
                                     (powerline-raw " " seg2)
                                     (funcall separator-left seg2 seg3)
                                     (powerline-vc seg3 'r)
                                     (when (bound-and-true-p nyan-mode)
                                       (powerline-raw (list (nyan-create)) seg3 'l))))
                          (rhs (list (powerline-raw global-mode-string seg3 'r)
                                     (funcall separator-right seg3 seg2)
                                     (unless window-system
                                       (powerline-raw (char-to-string #xe0a1) seg2 'l))
                                     (powerline-raw "%4l" seg2 'l)
                                     (powerline-raw ":" seg2 'l)
                                     (powerline-raw "%3c" seg2 'r)
                                     (funcall separator-right seg2 seg1)
                                     (powerline-raw " " seg1)
                                     (powerline-raw "%6p" seg1 'r)
                                     (when powerline-display-hud
                                       (powerline-hud seg1 seg3)))))
                     (concat (powerline-render lhs)
                             (powerline-fill seg3 (powerline-width rhs))
(powerline-render rhs)))))))

(use-package powerline
  :config
  (use-package powerline-evil)

  (setq powerline-default-separator (if (display-graphic-p) 'arrow nil))
  (jlr/powerline-default-theme)
)
#+END_SRC
* Org mode setup
#+BEGIN_SRC emacs-lisp
(message "Loading org mode settings")
#+END_SRC
** Defuns
** Core
#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure t
  :diminish " â“”"
  :mode ("\\.org$" . org-mode)
  :commands (org-capture org-clock-out org-occur-in-agenda-files org-agenda-files)
  :config
  (require 'org-indent)
  (use-package evil-org
    :ensure t
    :config
    (require 'evil-org))
  (require 'ox)
  (require 'ox-beamer)
  (use-package ox-gfm)
  (use-package ox-pandoc)
  (use-package ox-rst)

  (setq org-capture-templates '(("a" "My TODO task format."
                                 entry
                                 (file "todo.org")
                                 "* â˜› TODO %?\nSCHEDULED: %t")

                                ("n" "A (work-related) note."
                                 entry
                                 (file+headline "notes.org" "Work")
                                 "* %?\n%u\n\n"
                                 :jump-to-captured t))
        org-clock-persist-file (expand-file-name "org-clock-save.el" user-emacs-directory)
        org-id-locations-file (expand-file-name ".org-id-locations" user-emacs-directory)
        org-log-done t
        org-startup-with-inline-images t
        org-src-fontify-natively t
        org-startup-indented t
        org-agenda-text-search-extra-files '(agenda-archives)
        org-agenda-files '("~/Documents/org/")
        org-blank-before-new-entry '((heading . t)
                                     (plain-list-item . t))
        org-default-notes-file "~/Documents/org/todo.org"
        org-directory "~/Documents/org"
        org-enforce-todo-dependencies t
        org-log-done (quote time)
        org-log-redeadline (quote time)
        org-log-reschedule (quote time)
        org-agenda-skip-scheduled-if-done t
        org-insert-heading-respect-content t
        ;; org-ellipsis " â€¦"
        org-ellipsis "â¤µ")

  ;; (set-face-attribute 'org-upcoming-deadline nil :foreground "gold1")
  (add-hook 'org-capture-mode-hook 'evil-insert-state)
  (add-hook 'org-mode-hook 'evil-org-mode))
#+END_SRC
** Agenda mode
#+BEGIN_SRC emacs-lisp
;(use-package org-agenda
  ;:config
  ;(setq org-agenda-restore-windows-after-quit t)
  ;(evil-define-key 'normal
    ;"j" 'org-agenda-next-line
    ;"k" 'org-agenda-previous-line
    ;(kbd "M-j") 'org-agenda-next-item
    ;(kbd "M-k") 'org-agenda-previous-item
    ;(kbd "M-h") 'org-agenda-earlier
    ;(kbd "M-l") 'org-agenda-later
    ;(kbd "gd") 'org-agenda-toggle-time-grid
    ;(kbd "gr") 'org-agenda-redo))
#+END_SRC
** Calendar
#+BEGIN_SRC emacs-lisp
;(eval-after-load 'org
  ;(define-key org-read-date-minibuffer-local-map (kbd "M-h")
    ;(lambda () (interactive) (org-eval-in-calendar '(calendar-backward-day 1))))
  ;;(define-key org-read-date-minibuffer-local-map (kbd "M-l")
    ;(lambda () (interactive) (org-eval-in-calendar '(calendar-forward-day 1))))
  ;(define-key org-read-date-minibuffer-local-map (kbd "M-k")
    ;(lambda () (interactive) (org-eval-in-calendar '(calendar-backward-week 1))))
  ;(define-key org-read-date-minibuffer-local-map (kbd "M-j")
    ;(lambda () (interactive) (org-eval-in-calendar '(calendar-forward-week 1))))
  ;(define-key org-read-date-minibuffer-local-map (kbd "M-H")
    ;(lambda () (interactive) (org-eval-in-calendar '(calendar-backward-month 1))))
  ;(define-key org-read-date-minibuffer-local-map (kbd "M-L")
    ;(lambda () (interactive) (org-eval-in-calendar '(calendar-forward-month 1))))
  ;(define-key org-read-date-minibuffer-local-map (kbd "M-K")
    ;(lambda () (interactive) (org-eval-in-calendar '(calendar-backward-year 1))))
  ;(define-key org-read-date-minibuffer-local-map (kbd "M-J")
    ;(lambda () (interactive) (org-eval-in-calendar '(calendar-forward-year 1))))
;)
#+END_SRC
** Looks
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

(setq org-bullets-bullet-list '("â—‰" "â—‹" "âœ¸" "âœ¿"))
      org-todo-keywords '((sequence
                           "â˜› TODO"
                           "â—‹ IN-PROGRESS"
                           "âš‘ WAITING"
                           "|"
                           "âœ“ DONE"
                           "âœ— CANCELED")))

(font-lock-add-keywords
 'org-mode '(("\\(@@html:<kbd>@@\\) \\(.*\\) \\(@@html:</kbd>@@\\)"
              (1 font-lock-comment-face prepend)
              (2 font-lock-function-name-face)
              (3 font-lock-comment-face prepend))))
#+END_SRC
* Initialize Programming Modes
#+BEGIN_SRC emacs-lisp
(require 'init-lisp)
(require 'init-clojure)
(require 'init-python)
(require 'init-rust)
(require 'init-haskell)
(require 'init-scheme)
(require 'init-markdown)
#+END_SRC
* Custom Keybindings
** Defuns
#+BEGIN_SRC emacs-lisp
(defun minibuffer-keyboard-quit ()
  "Abort recursive edit.
In Delete Selection mode, if the mark is active, just deactivate it;
then it takes a second \\[keyboard-quit] to abort the minibuffer."
  (interactive)
  (if (and delete-selection-mode transient-mark-mode mark-active)
      (setq deactivate-mark  t)
    (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
    (abort-recursive-edit)))

 (evil-define-motion evil-search-symbol-forward (count &optional symbol)
   "Search forward for symbol under point"
   :jump t
   :type exclusive
   (interactive
    (list
     (prefix-numeric-value current-prefix-arg)
      evil-symbol-word-search))
    (dotimes (var (or count 1))
      (evil-search-word t nil t)))

(defun quick-find-file ()
  "Find a file with either projectile or ido depending on the context."
  (interactive)
  (if (projectile-project-p)
      (projectile-find-file)
  (ido-find-file)))
#+END_SRC
** =evil-leader=
#+BEGIN_SRC emacs-lisp
(after-load 'evil-leader
  (evil-leader/set-key
    "," 'pop-tag-mark
    "/" 'evilnc-comment-or-uncomment-lines
    ":" 'smex
    ";" 'smex
    "=" 'jlr/indent-buffer
    "B" 'magit-blame-toggle
    "D" 'open-current-line-in-codebase-search
    "R" 'reload-gui
    "S" 'delete-trailing-whitespace
    "T" 'gtags-find-tag
    "`" 'open-shell
    "a=" 'my-align-single-equals
    "aa" 'align-regexp
    "bb" 'switch-to-buffer
    "bk" 'kill-this-buffer
    "ff" 'quick-find-file
    "g" 'magit-status
    "h" 'fontify-and-browse    ;; HTML-ize the buffer and browse the result
    "l" 'whitespace-mode       ;; Show invisible characters
    "o" 'make-frame
    "ss" 'ag-project            ;; Ag search from project's root
    "tt" 'gtags-reindex
    "w" 'save-buffer
    "x" 'smex
    "y" 'yank-to-x-clipboard))
#+END_SRC
** Keybindings
#+BEGIN_SRC emacs-lisp
(after-load 'evil
  (define-key evil-normal-state-map (kbd ";") 'evil-ex)
  (define-key evil-normal-state-map (kbd "<down>") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "<up>") 'evil-previous-visual-line)
  (define-key evil-normal-state-map (kbd "C-]") 'gtags-find-tag-from-here)
  (define-key evil-normal-state-map (kbd "[i") 'show-first-occurrence)
  (define-key evil-normal-state-map (kbd "b") 'evilmi-jump-items)
  (define-key evil-normal-state-map (kbd "g/") 'occur-last-search)
  (define-key evil-normal-state-map (kbd "q") 'evil-search-symbol-forward)
  (define-key evil-normal-state-map (kbd "Q") 'evil-record-macro)

  (define-key evil-visual-state-map (kbd "b") 'evilmi-jump-items)
  (define-key evil-visual-state-map (kbd ":") 'exil-ex)
  (define-key evil-visual-state-map (kbd ";") 'exil-ex)

  (define-key evil-motion-state-map (kbd "b") 'evilmi-jump-items)
  (define-key evil-motion-state-map (kbd "j") 'evil-next-visual-line)
  (define-key evil-motion-state-map (kbd "k") 'evil-previous-visual-line)
  (define-key evil-motion-state-map (kbd "e") 'forward-word)
  (define-key evil-motion-state-map (kbd "E") 'forward-symbol)
  (define-key evil-motion-state-map (kbd "w") 'backward-word)
  (define-key evil-motion-state-map (kbd "W") 'backward-symbol)

  (define-key evil-inner-text-objects-map (kbd "b") 'evilmi-inner-text-object)
  (define-key evil-inner-text-objects-map (kbd "e") 'evil-inner-word)
  (define-key evil-inner-text-objects-map (kbd "E") 'evil-inner-WORD)
  (define-key evil-inner-text-objects-map (kbd "w") 'evil-inner-word)
  (define-key evil-inner-text-objects-map (kbd "W") 'evil-inner-WORD)

  (define-key evil-outer-text-objects-map (kbd "b") 'evilmi-outer-text-object)
  (define-key evil-outer-text-objects-map (kbd "e") 'evil-a-word)
  (define-key evil-outer-text-objects-map (kbd "E") 'evil-a-word)
  (define-key evil-outer-text-objects-map (kbd "w") 'evil-a-word)
  (define-key evil-outer-text-objects-map (kbd "W") 'evil-a-word)

  (evil-define-key 'insert global-map (kbd "s-d") 'eval-last-sexp)
  (evil-define-key 'normal global-map (kbd "s-d") 'eval-defun)
  (evil-define-key 'normal global-map (kbd "z d") 'dictionary-lookup-definition)

  ;; Make escape quit everything, whenever possible.
  (define-key evil-normal-state-map [escape] 'keyboard-quit)
  (define-key evil-visual-state-map [escape] 'keyboard-quit)
  (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)

  ;; My own Ex commands.
  (evil-ex-define-cmd "q[uit]" 'evil-quit)
  (evil-ex-define-cmd "qa" 'evil-quit-all)
)
#+END_SRC
