#!/bin/bash
# ku or keg utils

set -e

nodes() {
	find . -name "nodes.tsv" -exec awk -F'\t' '{print $1}' {} +
}

title() {
	HEADER="$(cat "docs/${1}/README")"
	HEADER="${HEADER:2}"
	echo "${HEADER}"
}

titles() {
	find . -name "nodes.tsv" -exec awk -F'\t' '{print "docs/"$1"/README.md:1:"$3}' {} +
}

search() {
	rg \
		--line-number \
		--files-with-matches \
		--no-heading \
		--smart-case \
		--glob "**/README.md" \
		"$@" | grep -o -E '[0-9]+'
}

search-qf() {
	rg \
		--line-number \
		--files-with-matches \
		--no-heading \
		--smart-case \
		--glob "docs/**/README.md" \
		"$@" | awk '{ cmd = "head -n 1 " $1; cmd | getline $2; close(cmd); print $1":1:"$2}'
}

fzf() {
	ku nodes | _keg-node-complete "$@"
	# RG_PREFIX='ku search'
	# INITIAL_QUERY=""
	# # shellcheck disable=SC2034
	# FZF_DEFAULT_COMMAND="$RG_PREFIX '$INITIAL_QUERY'" fzf \
	#     --bind "change:reload:$RG_PREFIX {q} || true" \
	#     --sort \
	#     --preview 'echo -n {1} " "; rg "^#" docs/{1}/README.md --no-heading | head -n 1;bat --style "grid,numbers,snip" --color=always --paging never docs/{1}/README.md' \
	#     --height=100% \
	#     --width=80% \
	#     --ansi --phony --query "$INITIAL_QUERY" "$@"
	#
	# FZF_DEFAULT_COMMAND="$RG_PREFIX '$INITIAL_QUERY'" fzf \
	#     --bind "change:reload:$RG_PREFIX {q} || true" \
	#     --sort \
	#     --preview 'echo -n {1} " "; rg "^#" docs/{1}/README.md --no-heading | head -n 1;bat --style "grid,numbers,snip" --color=always --paging never docs/{1}/README.md' \
	#     --height=100% \
	#     --ansi --phony --query "$INITIAL_QUERY" "$@"
}

update() {
	git pull
}

publish() {
	keg publish
}

help() {
	echo ""
}

# ensure we are in a keg
keg current &>/dev/null || exit 1

KEG_CURRENT="${KEG_CURRENT:-$(git rev-parse --show-toplevel &>/dev/null || echo '')}"
cd "${KEG_CURRENT}" || exit 1

# keg doesn't handle the context as expected.  Let keg refigure it out from here
KEG_CURRENT=''

# ensure we are in a keg
keg current &>/dev/null || exit 1

######################### Tab Completion Context ########################
if test -n "${COMP_LINE}"; then
	cmd="$(echo "${COMP_LINE}" | awk '{print $2}')"
	pre="$(printf "%s" "${COMP_LINE}" | awk '{for(i=3; i<=NF; i++) printf $i" "; print ""}')"
	case "${cmd}" in
	edit | view | title | link)
		nodes list
		exit 0
		;;
	keg)
		COMP_LINE="${pre}" keg
		exit 0
		;;
	*)
		for cmd in build create deploy edit fzf help keg link nodes publish pwd search sync titles update view; do
			[[ "${cmd}" =~ ^$pre ]] && echo "${cmd}"
		done
		exit 0
		;;
	esac
fi

###################### Regular Context Delegation ######################

CMD="$(echo "$@" | awk '{print $1}')"
shift

case "${CMD}" in
e | edit) keg edit "$@" ;;
v | view) keg edit "$@" ;;
k | keg) keg "$@" ;;
c | create) keg c "$@" ;;
b | build) make -f "${XDG_CONFIG_HOME:-$HOME/.config}/ku/makefile" "$@" ;;
d | deploy) ./deploy "$@" ;;
p | publish) keg publish ;;
u | update) update "$@" ;;
list) nodes "$@" ;;
nodes) nodes "$@" ;;
title) title "$@" ;;
titles) titles "$@" ;;
search) search "$@" ;;
qf-search) search-qf "$@" ;;
sync) git pull "$@" ;;
l | link) keg link "$@" ;;
pwd)
	pwd
	;;
fzf) fzf "$@" ;;
*)
	keg edit "$CMD"
	;;
esac
