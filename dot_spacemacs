;; -*- mode: emacs-lisp; lexical-binding: t -*-
(defun dotspacemacs/layers ()
  "Layer configuration:
This function should only modify configuration layer settings."
  (setq-default
   dotspacemacs-distribution 'spacemacs
   dotspacemacs-enable-lazy-installation 'unused
   dotspacemacs-ask-for-lazy-installation t
   dotspacemacs-configuration-layer-path '()
   dotspacemacs-configuration-layers
   '(
     ;; ----------------------------------------------------------------
     ;; Example of useful layers you may want to use right away.
     ;; Uncomment some layer names and press `SPC f e R' (Vim style) or
     ;; `M-m f e R' (Emacs style) to install them.
     ;; ----------------------------------------------------------------
     (auto-completion :variables
                      auto-completion-enable-snippets-in-popup 'nil
                      auto-completion-return-key-behavior 'nil
                      auto-completion-tab-key-behavior 'complete
                      )
     syntax-checking
     ;; (syntax-checking :variables syntax-checking-use-original-bitmaps t)
     helm
     ;; multiple-cursors
     ;; org
     ;; (shell :variables
     ;;        shell-default-height 30
     ;;        shell-default-position 'bottom)
     ;; spell-checking
     ;; syntax-checking
     treemacs
     git
     version-control
     lsp

     ansible
     cmake
     docker
     emacs-lisp
     (go :variables
         go-tab-width 4
         gofmt-command "goimports"
         godoc-at-point-function 'godoc-gogetdoc
         go-backend 'lsp)
     markdown
     python
     (typescript
      :variables
      typescript-indent-level 2)
     vimscript
     yaml
     )

   dotspacemacs-additional-packages '(unfill)
   dotspacemacs-frozen-packages '()
   dotspacemacs-excluded-packages '()
   dotspacemacs-install-packages 'used-only))

(defun dotspacemacs/init ()
  "Initialization: This function is called at the very beginning of Spacemacs startup,
before layer configuration. It should only modify the values of
Spacemacs settings."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   dotspacemacs-editing-style 'vim
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press `SPC T n' to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(spacemacs-dark
                         spacemacs-light)

   ;; Set the theme for the Spaceline. Supported themes are `spacemacs',
   ;; `all-the-icons', `custom', `doom', `vim-powerline' and `vanilla'. The
   ;; first three are spaceline themes. `doom' is the doom-emacs mode-line.
   ;; `vanilla' is default Emacs mode-line. `custom' is a user defined themes,
   ;; refer to the DOCUMENTATION.org for more info on how to create your own
   ;; spaceline theme. Value can be a symbol or list with additional properties.
   ;; (default '(spacemacs :separator wave :separator-scale 1.5))
   dotspacemacs-mode-line-theme '(spacemacs :separator wave :separator-scale 1.5)

   ;; If non-nil the cursor color matches the state color in GUI Emacs.
   ;; (default t)
   dotspacemacs-colorize-cursor-according-to-state t

   ;; Default font, or prioritized list of fonts. `powerline-scale' allows to
   ;; quickly tweak the mode-line size to make separators look not too crappy.
   dotspacemacs-default-font '("Source Code Pro"
                               :size 13
                               :weight normal
                               :width normal)

   dotspacemacs-line-numbers t

   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etcâ€¦
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   dotspacemacs-smart-closing-parenthesis nil))

(defun dotspacemacs/user-env ()
  "Environment variables setup.
This function defines the environment variables for your Emacs session. By
default it calls `spacemacs/load-spacemacs-env' which loads the environment
variables declared in `~/.spacemacs.env' or `~/.spacemacs.d/.spacemacs.env'.
See the header of this file for more information."
  (spacemacs/load-spacemacs-env))

(defun dotspacemacs/user-init ()
  "Initialization for user code:
This function is called immediately after `dotspacemacs/init', before layer
configuration.
It is mostly for variables that should be set before packages are loaded.
If you are unsure, try setting them in `dotspacemacs/user-config' first."
  )

(defun dotspacemacs/user-load ()
  "Library to load while dumping.
This function is called only while dumping Spacemacs
configuration. You can `require' or `load' the libraries of your
choice that will be included in the dump."
  )

(defun dotspacemacs/user-config ()
  "Configuration for user code: This function is called at the
very end of Spacemacs startup, after layer configuration. Put
your configuration code here, except for variables that should be
set before packages are loaded."
  (setq create-lockfiles nil)

  (global-set-key [remap fill-paragraph] #'unfill-toggle)
  (evil-global-set-key 'normal ";" 'evil-ex)
  (evil-global-set-key 'visual ";" 'evil-ex)
  (evil-global-set-key 'motion "w" 'evil-backward-word-begin)
  (evil-global-set-key 'motion "W" 'evil-backward-WORD-begin)
  (evil-global-set-key 'motion "b" 'evil-jump-item)

  (with-eval-after-load 'helm
    (define-key helm-find-files-map (kbd "C-n") 'next-history-element)
    (define-key helm-find-files-map (kbd "C-p") 'previous-history-element)
    (define-key helm-find-files-map (kbd "M-n") 'helm-next-line)
    (define-key helm-find-files-map (kbd "M-p") 'helm-previous-line)

    (define-key helm-map (kbd "C-n") 'next-history-element)
    (define-key helm-map (kbd "C-p") 'previous-history-element)
    (define-key helm-map (kbd "M-n") 'helm-next-line)
    (define-key helm-map (kbd "M-p") 'helm-previous-line))
  )
